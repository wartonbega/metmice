3.141593 -> pi;


 
sin_r(x)[float]
{ 
    // calcule le sinus en radian de manière récursive.
    // Doit être en mode de calcule normal
    
    if (x < 0.000001 )
    {
        return x;
    } 
    else 
    {
        !sin_r(x / 3.0 ) -> sinx;
        sinx * 3.0  -> a;
        sinx ^ 3.0 * 4.0 -> b;
        a - b -> t;
        return t;
    };
};


sin(x)[float]
{
    // Fonction interface entre la fonction sin_r et le code
    // Met le mode de calcule normal
    !get_compute_mode() -> mode;
    !set_compute_mode(1);

    2.0 * pi  -> dpi;
    x % dpi -> x;

    !sin_r(x) -> r;

    !set_compute_mode(mode);
    return r;
};

cos(x)[float]
{
    pi/2.0 + x -> x;
    return !sin(x);
};

abs(x)[none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);
    if (x 0 <){
        x -> returning;
        !set_compute_mode(mode);
        return returning;
    };
    !set_compute_mode(mode);
    return x;
};

factorial(var)[none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);
    !typecheck(var, "int", "!factorial");
    1 -> total;
    for(i, 1, var){
        total i * -> total;
    };
    !set_compute_mode(mode);
    return total;
};


sum(x)[none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);
    !typecheck(x, "int", "!sum");
    0 -> total;
    for(i, 0, x){
        total i + -> total;
    };
    !set_compute_mode(mode);
    return total;
};

tenth_power(n)[none]
{
    // Renvoie la puissance de 10, pour l'ordre de grandeur
    // Exemple : !tenth_power(987) = 2 (10^2 = 100)
    
    !get_compute_mode() -> mode;
    !set_compute_mode(1);
    0 -> p;
    while (p < n)
    {
        10 ^ p -> power;
        if ( n % power = n)
        {
            !set_compute_mode(mode);
            return p-1;
        };
        p + 1 -> p;
    };
    !set_compute_mode(mode);
};

pgcd(a, b)[none]
{
    while (!not(b = 0))
    {
        b -> t;
        a % b -> b;
        t -> a;
    };
    return a;
};