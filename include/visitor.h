void manage_system_pile();
void empty_compute_stack();
void output_display_pile();
void push_display_pile(Mtmc_variable *element, vector<string> reference);
Mtmc_variable *variable_get_value(string name);
bool variable_exist(string name);
void variable_asignement(Mtmc_variable *var, string name);
void variable_override(Mtmc_variable *var, string name);
bool function_exists(string name);
Mtmc_functions *function_get(string name);
void function_asignement(string name, vector<Node *> paterns, vector<Node *> args, vector<Node *> antiargs);
vector<Node *> get_listed_values(Node *listed_value);
int function_index(string name);
Mtmc_variable *funcall_base(Node *instruction, int recursive, vector<string> reference);
Mtmc_variable *compute(Node *trunc, bool empty_stack, bool funcall, vector<string> reference);
vector<Mtmc_variable *> compute_listed_values(vector<Node *> listed_values, vector<string> reference);
bool mtmc_accept_var_name(string name);
void compute_operator_rpn(vector<string> names, int &i, vector<string> reference, vector<string> types);
void compute_operator_normal(vector<string> names, vector<string> types, int &i, bool funcall, map<string, Mtmc_variable *> &variable_function, Node *trunc, int recursive, vector<string> reference);
int visitor(vector<Node *> ast, bool ast_show, bool debug, bool strict, vector<string> reference);
Mtmc_variable *get_value_from_undefined_string(vector<string> names, vector<string> types, int &i);