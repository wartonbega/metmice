
get_compute_mode()[]{
    push 2 0;
    push 3 10;
    0 + -> mode;
    push 2 mode;
    push 3 10;
    return mode; 
};

set_compute_mode(mode)[none]{
    push 2 mode;
    push 3 10;
};

check_compute_mode(check)[none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);
    if (mode check =){
        !set_compute_mode(mode);
        return true;
    } else {
        !set_compute_mode(mode);
        return false;
    };
};

set_stack_garbage_collection(mode)[none]{
    push 2 mode;
    push 3 11;
};

include "shorts.mtmc";
include "inout.mtmc";
include "errors.mtmc";
include "basic.mtmc";
include "sys.mtmc";
include "maths.mtmc";
include "maps.mtmc";

sleep(value)[none]{
    push 2 value;
    push 3 4;
};

max_between(x, y)[none, none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);
    if (x y >){
        return x;
    };
    !set_compute_mode(mode);
    return y;
};

typeof(variable)[none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);
    type variable;
    "" + -> typef;
    !set_compute_mode(mode);
    return typef;
};

factoriel(var)[none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);
    !typecheck(var, "int", "!factoriel");
    2 -> total;
    for(i, 1, var){
        total i * -> total;
    };
    !set_compute_mode(mode);
    return total;
};

sum(x)[none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);
    !typecheck(x, "int", "!sum");
    0 -> total;
    for(i, 0, x){
        total i + -> total;
    };
    !set_compute_mode(mode);
    return total;
};

sum_between(x, y)[none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);

    !typecheck(x, "int", "!sum");
    !typecheck(y, "int", "!sum");
    !assert(x y <, "the second argument should be greater than the first", "!sum_between");

    0 -> total;

    for(i, x, y){
        total i + -> total;
    };
    !set_compute_mode(mode);
    return total;
};


abs(x)[none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);
    if (x 0 <){
        return -1 x *;
    };
    !set_compute_mode(mode);
    return x;
};

len(list)[none]{
    !get_compute_mode() -> mode;
    !set_compute_mode(0);
    !typecheck(list, "list", "!len");
    length list;
    0 + -> total;
    !set_compute_mode(mode);
    return total;
};

operator "or" "!or";
operator "and" "!and";
operator "xor" "!xor";
operator "in" "!in";